{"__html":"<h1 id=\"1c2ddf5c0e7c7115a6a85f572951a1a2\">03-回调地址接口实现</h1>\n<h3 id=\"0e32775d2c2253842933df580299ae3e\">请求类型</h3>\n<ul>\n<li>POST</li>\n</ul>\n<h3 id=\"182cf1b8d133c280a3135972d6d3b705\">请求参数</h3>\n<p><code>requestBody</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sign</td>\n<td>String</td>\n<td>是</td>\n<td>将request_content、timestamp、nonce按字典排序后RSA签名后的Base64字符串</td>\n</tr>\n<tr>\n<td>request_content</td>\n<td>String</td>\n<td>是</td>\n<td>回调接口请求体字符串</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>Long</td>\n<td>是</td>\n<td>13位时间戳</td>\n</tr>\n<tr>\n<td>nonce</td>\n<td>String</td>\n<td>是</td>\n<td>6位随机字符</td>\n</tr>\n<tr>\n<td>message_type</td>\n<td>String</td>\n<td>是</td>\n<td>消息类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"85c9c7073517cf8f1bbabdeff4704868\">请求样例</h3>\n<pre><code class=\"language-json\">{\n  &quot;sign&quot;:&quot;Ea6kxCUj1y06D8fSqzCPd2NUqQ8ygcwkTDXMYeUY5A6MRdlWWTdz09KnReHMLQGwbSMYMB7UdBjzR43xwoiT+AE9Sh9MCV8c4Z/l9EE5lE8E3ftN9D1D+PybVE6iZ9+jOhaTGpk49MF2ln9Gkfq6qzfCEFrTrR6livScJj+bGz4HpDhENW45XhRaMyuFr7xdrLbE4aTw7VoLiK3xNrIpnd7/SgFgJ8D1hyFyF1l9GfkFUFQAN+O2HZgBUUcCALItsJhgujKtdrrAHDkBPbrliEDncOcnttXYtSan+rt4tmtEL8rG0Ha+N8kR9uvzHAFpdIqsjUqv0SAQAx/Y6q9g8A==&quot;,\n    &quot;request_content&quot;:&quot;{\\&quot;field1\\&quot;:\\&quot;业务字段1\\&quot;,\\&quot;field2\\&quot;:\\&quot;业务字段1\\&quot;}&quot;,\n    &quot;timestamp&quot;:1620714106666,\n    &quot;nonce&quot;:&quot;d94f38&quot;,\n    &quot;message_type&quot;:&quot;ecode-ac.reject&quot;\n}</code></pre>\n<h3 id=\"7b02a535256ea8efbaeba2d11a5c9d60\">响应成功标志</h3>\n<p>Http Status Code: 200，响应体中code值为&quot;000&quot;:</p>\n<pre><code class=\"language-json\">{\n    &quot;code&quot;:&quot;000&quot;,\n    ...\n}</code></pre>\n<h3 id=\"11df7111e8c8c96afd598daa2f866042\">回调验签规则</h3>\n<p>签名原文获取——将请求体中的timestamp、nonce、request_content字段进行字典排序，参数和值之间用=连接，参数之间用&amp;连接。message_type不参与验签。</p>\n<p><strong>签名原文实例</strong></p>\n<pre><code>nonce=d94f38&amp;request_content={\\&quot;field1\\&quot;:\\&quot;业务字段1\\&quot;,\\&quot;field2\\&quot;:\\&quot;业务字段1\\&quot;}&amp;timestamp=1620714106666</code></pre>\n<h3 id=\"c9b638be059ba06a592cedd2a7ee3a31\">回调验签样例</h3>\n<pre><code class=\"language-java\">public void testCallback(@RequestBody JsonNode request) {\n    //将timestamp、nonce、request_content进行字典排序，参数和值之间用=连接，参数之间用&amp;连接。\n    final String content = &quot;nonce=&quot; + request.get(&quot;nonce&quot;).asText() +\n                &quot;&amp;request_content=&quot; + request.get(&quot;request_content&quot;).asText() +\n                &quot;&amp;timestamp=&quot; + request.get(&quot;timestamp&quot;).asText();\n    //获取签名信息\n    String sign = request.get(&quot;sign&quot;).asText();\n    final boolean verify = rsaCheckContent(content, sign, publicKey);\n    log.info(&quot;验签结果:{}&quot;, verify);\n}\n\n/**\n * 用公钥和签名字符串对签名进行验证\n *\n * @param content\n * @param sign\n * @param publicKey\n * @return\n */\npublic static boolean rsaCheckContent(String content, String sign, String publicKey) {\n    try {\n        PublicKey pubKey = getPublicKeyFromX509(&quot;RSA&quot;, new ByteArrayInputStream(publicKey.getBytes()));\n        Signature signature = Signature.getInstance(&quot;SHA1WithRSA&quot;);\n        signature.initVerify(pubKey);\n        signature.update(content.getBytes(StandardCharsets.UTF_8));\n        return signature.verify(Base64.decodeBase64(sign.getBytes()));\n    } catch (Exception var6) {\n        throw new BusinessException(&quot;401001&quot;, var6.getMessage());\n    }\n}\npublic static PublicKey getPublicKeyFromX509(String algorithm, InputStream ins) throws Exception {\n    KeyFactory keyFactory = KeyFactory.getInstance(algorithm);\n    byte[] encodedKey = IOUtils.toString(ins, StandardCharsets.UTF_8).getBytes();\n    encodedKey = Base64.decodeBase64(encodedKey);\n    return keyFactory.generatePublic(new X509EncodedKeySpec(encodedKey));\n}</code></pre>\n","key":"74c8e81df81ca5aa7f8215595008eb51","fileName":"__open-docs_05-网关回调_03-回调地址接口实现.json","mtimeMs":1625127790000,"birthtimeMs":1625127790000}